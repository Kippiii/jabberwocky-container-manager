"""
Manages the exceptions related to the containers
"""

import re
import socket

from pexpect import EOF as PexpectEOFException
from pexpect import TIMEOUT as PexpectTimeoutException
from pexpect import ExceptionPexpect
from pathlib import Path

from src.system.syspath import get_server_log_file

PORT_FAILURE_RE = r"""Could not set up host forwarding rule"""
LOGIN_FAILURE_RE = r"""Login incorrect"""


class BootFailure(Exception):
    """
    Raised when pexpect fails to boot
    """

    log_file_path: str

    def __init__(self, log_file_path: str) -> None:
        self.log_file_path = log_file_path

    def __str__(self) -> str:
        return f"See {self.log_file_path} for information on failure."


class PortAllocationError(BootFailure):
    """
    Raised when a port cannot be allocated
    """

    def __str__(self) -> str:
        return "All ports are in use"


class InvalidLoginError(BootFailure):
    """
    Raised when the provided login is invalid
    """

    def __str__(self) -> str:
        return "The login provided for the container is invalid"


def gen_boot_exception(exc: ExceptionPexpect, log_file_path: Path) -> BootFailure:
    """
    Converts a Pexpect Exception to one for this program

    :param exc: The exception raised by pexpect
    :param log_file_path: The path to the log file generated by pexpect
    :return: A boot failure exception
    """
    with open(log_file_path, encoding="utf-8") as file:
        data = file.read()
        if isinstance(exc, PexpectEOFException):
            exp = re.compile(PORT_FAILURE_RE)
            if re.search(exp, data) is not None:
                return PortAllocationError(log_file_path)
        elif isinstance(exc, PexpectTimeoutException):
            exp = re.compile(LOGIN_FAILURE_RE)
            if re.search(exp, data) is not None:
                return InvalidLoginError(log_file_path)
    return BootFailure(log_file_path)


class PoweroffBadExitError(RuntimeError):
    """
    Raised when poweroff fails
    """


class FailedToAuthorizeKeyError(RuntimeError):
    """
    Raised during failure to authorize keys
    """


class ContainerAlreadyExistsError(RuntimeError):
    """
    Raised during container installation when a
    container of the desired name already exists
    """


class ServerError(RuntimeError):
    """
    Occurs when an issue happens on the server
    """
    def __init__(self, sock: socket.socket):
        self.sock = sock
        self._recv()

    def _recv(self):
        pass

    def __str__(self):
        return f"An error occured on the server. Please check {get_server_log_file()} for more information"


class UnknownRequestError(ServerError):
    """
    Raised when server recieves an unknown request
    """
    def __str__(self):
        return "Server recieved an unknown request"


class ContainerNotStartedError(ServerError):
    """
    Raised when there is an attempt to use a container that was not started
    """
    def __str__(self):
        return "Attempt to use container that is not running"


class UnknownContainerError(ServerError):
    """
    Raised when container is not installed
    """
    def __str__(self):
        return "Attempt to use container that is not installed"


class BootFailureError(ServerError):
    """
    Raised when container fails to boot
    """
    def __str__(self):
        return "The container failed to boot"


class InvalidPathError(ServerError):
    """
    Raised when attempted path does not exist
    """
    def __str__(self):
        return "The path does not exist"


def get_server_error(value: str, sock: socket.socket) -> None:
    """
    Gets the exception related to a server error
    """
    mapping = {
        "UNKNOWN_REQUEST": UnknownRequestError,
        "CONTAINER_NOT_STARTED": ContainerNotStartedError,
        "NO_SUCH_CONTAINER": UnknownContainerError,
        "BOOT_FAILURE": BootFailureError,
        "INVALID_PATH": InvalidPathError,
        "EXCEPTION_OCCURED": ServerError,
    }
    if value not in mapping:
        raise ValueError(f"Recieved unknown error from server: {value}")
    raise mapping[value](sock)
