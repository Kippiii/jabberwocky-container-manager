import re
from pexpect import ExceptionPexpect
from pexpect import EOF as PexpectEOFException

PORT_FAILURE_RE = r""".*Could not set up host forwarding rule.*"""

class BootFailure(Exception):
    """
    Raised when pexpect fails to boot
    """
    log_file_path: str

    def __init__(self, log_file_path: str) -> None:
        self.log_file_path = log_file_path

    def __str__(self) -> str:
        return f"See {self.log_file_path} for information on failure."

class PortAllocationError(BootFailure):
    """
    Raised when a port cannot be allocated
    """

    def __str__(self) -> str:
        return "All ports are in use"

def gen_boot_exception(exc: ExceptionPexpect, log_file_path: str) -> BootFailure:
    """
    Converts a Pexpect Exception to one for this program

    :param exc: The exception raised by pexpect
    :param log_file_path: The path to the log file generated by pexpect
    :return: A boot failure exception
    """
    with open(log_file_path, encoding="utf-8") as file:
        data = file.read()
        if isinstance(exc, PexpectEOFException):
            if re.match(PORT_FAILURE_RE, data) is not None:
                return PortAllocationError(log_file_path)
    return BootFailure(log_file_path)